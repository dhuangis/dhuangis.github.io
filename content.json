{"meta":{"title":"bushipeien","subtitle":null,"description":null,"author":"dhuang","url":""},"pages":[{"title":"about","date":"2017-09-13T04:21:24.000Z","updated":"2017-09-13T04:21:24.483Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Mavproxy, Dronekit And Mission Planner","slug":"relationmavproxy","date":"2017-09-07T08:46:25.000Z","updated":"2017-09-23T13:25:36.704Z","comments":true,"path":"2017/09/07/relationmavproxy/","link":"","permalink":"/2017/09/07/relationmavproxy/","excerpt":"","text":"I：The Relation Between Mavproxy and DronekitI would like to list out some materials before begining, which are all from dronkit. This topic explains how to set up and run DroneKit-Python (within MAVProxy) on the different host operating systems and then run a basic DroneKit app. The remaining dependencies (including MAVProxy), are installed when you get DroneKit-Python from the public PyPi repository: Install DroneKit-Python and its remaining dependencies (including MAVProxy) from the public PyPi repository: To install DroneKit-Python using the installer: Download and run the latest MAVProxy installer — accept all prompts. Download and run the latest DroneKit installer — accept all prompts (install in the same location as MAVProxy). Before executing DroneKit scripts you must first start MAVProxy and connect to your autopilot (simulated or real). The connection to the vehicle can be set up on the command line when starting MAVProxy or after MAVProxy is running. Then, some important information following indicate the relation between them. DroneKit is implemented as a MAVProxy module (MAVProxy is installed automatically with DroneKit). The best way to load the DroneKit module into MAVProxy is to add it to the startup script (mavinit.scr). Alternatively you can choose to manually (re)load DroneKit into MAVProxy every time you need it:123MANUAL&gt; module load droneapi.module.apiDroneAPI loadedMANUAL&gt; So, simple put, the dronkit is one of the module of Maxproxy. It’s time to see what’s the meaning of this. It sounds like the module of linux. MAVProxy can be extended with modules. These run in parallel threads to the main MAVProxy program in order to maintain overall stability.Modules can include such things as GUI elements and diagnostic and monitoring applications. This problem has been solved, go on with our work. NOTE: I made some mistakes that the above text is from the dronekit whose version is 1.5.X. whereas it is independent of Marproxy after 2.0.X. II: Compare Mavproxy and Misson PlannerI search this question but get nothing except stackoverflow, maybe it’s a strange quetion. I find there is a cooperation relation between mavproxy and misson plannner. And most pepole want to use mavproxy to control the UAV, meanwile, observe the data from the autopilot in misson planner. I will do some basic experiments to compare the latency in the next post. III: The Interface Between Matlab And Pyhon. To call Python functions from MATLAB The above context is from cpython. To call Matlab functions from PythonThe above context is from matlab. On the surface, it’s very convenient to call each other. But, just look easy, hard to do. I will have a try in the next post.","categories":[],"tags":[]},{"title":"CopyRight","slug":"copyright","date":"2017-09-07T08:46:25.000Z","updated":"2017-09-23T12:54:56.956Z","comments":true,"path":"2017/09/07/copyright/","link":"","permalink":"/2017/09/07/copyright/","excerpt":"","text":"I’m only a student and will graduate after two years. all the posts here aim to track the learning progress. And they are demonstrates for some projects in my resume, irrelevant for the business. I would comply with the specifications for IT, and all the quotes would mark out the source. I enjoy being a geek and focus on the ideas behind the code. Of course, i will participate in some open source projects in the future. All the articles here are original!","categories":[],"tags":[]},{"title":"Hardware Loop Experiment(continuing..)","slug":"interaction","date":"2017-09-07T08:46:25.000Z","updated":"2017-09-28T11:22:12.963Z","comments":true,"path":"2017/09/07/interaction/","link":"","permalink":"/2017/09/07/interaction/","excerpt":"","text":"I : Closed Loop ExperimentBefore start, i recommend this gitter talk for a quick overview. Due to the lack of the basic knowlegae of Mavlink, something is not easy for me. I should make the complex issues simple. Frist, i have a idea that the pixhawk2 send mavlink messgaes to the GSC via 3DR radios while receving the messages by the companion computer via UART. We should analyses it’s dismerits and merits. Obviously, the latency of the connect via UART is lower than that via RF-link. But we have to use 2nd RF radio to connect between the GSC and the pixhawk. Actually, we hope the companion computer ( such as edison) can relay the STATUS messages to the GCS. So, i just compromise myself in some respects. Referring to the ardupilot, i have quickly completed the connection. it’s worth to make efforts to highlight something. When arming, the message “Prearm : motor interlock enabled” appears. And i puzzled over this problem as i don’t use the motor interlock feature. Then, i ask for a help in the official discussion forum ：ardupilot. But i get nothing until now. Finally, i find a way to solve this prolem. Set CH8_OPT 32 Set ARM_CHECK 0 Keep the CH8 swith off when arming. Keep the CH8 swith on after armed to make motor spin. NOTE:During this process, i have tried to modify the code in AP_ARMING.cpp and comment lines relative to motor interlock. Although the messages above disapper, i encounter some new problem, such as “prearm: check firmware…”. If you have tracked the code, you would know the latter is caused by the former. Due to the lack of some electirc componets such as transverters, which translate PWM to PPM, i haven’t verified the whole system. Aimming to simplify the system. i divide the work into two parts. First, i will connect pixhawk2 and heilcopter with FBL to complete whole system. Second, we should configure that through the MP, including the MicroBeast. 1.1 Hardware Loop with FBL 1.1.1 Overall DesignThe drive signals from the Mavproxy running on the intel control the output of the pixawk2 directly. And the feedback information ( STATUS messages ) from the pixhawk2 relays to the mission planner on your PC. The SecureCRT is a way to access to your embeded system via TCP/IP, so you can run the Mavproxy or dronekit to do some missions or scripts. NOTE:During this process, i have ignored the latency in this way. The recommend method is to modify the code and replace it with your own program as you are familiar with the code of arduilot, which is not easy. Fig. 1 1.1.2 Connecting pixhawk2The connecting is very simple, referring to the ardupilot. Fig. 2 But, the configuration of the helicopter is very complex and requires some aircraft professional skills. Some connect details: 1.1.3 Configuring pixhawk21.2 Self Test 1.2.1 Automatic Scripts 1.2.2 Results","categories":[],"tags":[]}]}